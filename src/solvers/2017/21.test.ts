import test from "node:test";
import { createLineReaderFromString } from "../../line-reader";
import solver from "./21";

test("2017.21", async (t) => {
  const input = `../.. => .#./.#./###
#./.. => .#./.#./##.
##/.. => #../.##/.#.
.#/#. => #.#/#../..#
##/#. => ###/##./#.#
##/## => .../.../.#.
.../.../... => #.#./.###/..##/#.##
#../.../... => #.#./#.##/#..#/#..#
.#./.../... => #.#./###./#.#./..#.
##./.../... => ##../###./##.#/...#
#.#/.../... => ..../..#./####/..#.
###/.../... => ##../..../#.../#...
.#./#../... => .#../..##/#..#/.#.#
##./#../... => ####/.###/.###/.###
..#/#../... => .#.#/.##./...#/##..
#.#/#../... => #.##/#.##/#.##/.#..
.##/#../... => .#../...#/..#./.##.
###/#../... => .##./.###/#..#/##.#
.../.#./... => .#../.#.#/.#../#.##
#../.#./... => ...#/##../####/##..
.#./.#./... => ###./#..#/..#./...#
##./.#./... => #.##/..#./#.#./..#.
#.#/.#./... => .#.#/...#/..../#.##
###/.#./... => ..##/##.#/#.##/###.
.#./##./... => .##./####/##../####
##./##./... => .###/..../####/#...
..#/##./... => ..../##.#/.###/.##.
#.#/##./... => #.#./###./..../###.
.##/##./... => ###./.###/.#../##.#
###/##./... => #.##/#.#./..../##.#
.../#.#/... => ###./#.##/.###/#.##
#../#.#/... => ##.#/..../..../.#.#
.#./#.#/... => .#.#/..##/.#../.##.
##./#.#/... => .##./..#./...#/#...
#.#/#.#/... => ..../###./..#./.#.#
###/#.#/... => ..##/.##./###./#.##
.../###/... => .#../####/.##./..#.
#../###/... => ..##/#.#./...#/##..
.#./###/... => ..#./####/##../#.##
##./###/... => .##./##.#/####/.#.#
#.#/###/... => .###/#.##/####/.##.
###/###/... => #.../#.../##../.##.
..#/.../#.. => ..##/#.#./#.../#.#.
#.#/.../#.. => ###./##.#/..#./##.#
.##/.../#.. => ..#./..../##../.#.#
###/.../#.. => ####/.#.#/.#.#/####
.##/#../#.. => ####/####/...#/.#.#
###/#../#.. => ..##/..#./.##./##..
..#/.#./#.. => ####/...#/####/#..#
#.#/.#./#.. => ..#./.###/#.#./##.#
.##/.#./#.. => .###/.#.#/#..#/..#.
###/.#./#.. => ..../##../.#.#/.#..
.##/##./#.. => ###./####/..../#...
###/##./#.. => ####/#..#/##.#/##.#
#../..#/#.. => ####/##.#/..../.###
.#./..#/#.. => ..../.#../..#./..#.
##./..#/#.. => .#.#/...#/#.##/..#.
#.#/..#/#.. => #.#./#.##/#..#/####
.##/..#/#.. => ..#./##../####/.#..
###/..#/#.. => #.../##.#/###./.#.#
#../#.#/#.. => ..../.#.#/..#./#.#.
.#./#.#/#.. => #.##/...#/.##./.#..
##./#.#/#.. => .###/##.#/##.#/####
..#/#.#/#.. => ..../..../...#/##.#
#.#/#.#/#.. => ##.#/.#../###./..#.
.##/#.#/#.. => ###./..../...#/.##.
###/#.#/#.. => .###/#..#/.##./.###
#../.##/#.. => ##../.#.#/.##./.##.
.#./.##/#.. => .###/.###/..##/.#..
##./.##/#.. => ..##/###./...#/#...
#.#/.##/#.. => ..#./###./...#/##..
.##/.##/#.. => ####/###./#.#./##..
###/.##/#.. => ..##/.##./#.../..##
#../###/#.. => ####/.#../.###/.#.#
.#./###/#.. => .##./##.#/..##/##..
##./###/#.. => ..##/##.#/##../.#.#
..#/###/#.. => ##../..../.#.#/#..#
#.#/###/#.. => ..#./###./####/..##
.##/###/#.. => ##../##../..##/.##.
###/###/#.. => ###./...#/#..#/..#.
.#./#.#/.#. => ..../.###/.###/#...
##./#.#/.#. => .###/..#./..../#...
#.#/#.#/.#. => #..#/.##./#.##/..#.
###/#.#/.#. => ####/##../####/....
.#./###/.#. => ..../.###/..../###.
##./###/.#. => ###./.#../#.#./.#..
#.#/###/.#. => ..../..##/..##/....
###/###/.#. => ###./...#/#.../..#.
#.#/..#/##. => ###./.##./.#../....
###/..#/##. => ####/...#/##../#..#
.##/#.#/##. => ..../...#/##.#/#.##
###/#.#/##. => .#.#/.###/..../#...
#.#/.##/##. => .#.#/#.#./...#/#...
###/.##/##. => .##./...#/#.../..#.
.##/###/##. => .#.#/.##./.##./##..
###/###/##. => #.#./##../##../...#
#.#/.../#.# => #.#./##.#/##.#/####
###/.../#.# => .#../.#.#/.##./#.##
###/#../#.# => ###./##../..##/##..
#.#/.#./#.# => ####/#.#./###./.##.
###/.#./#.# => ..#./.##./..../#...
###/##./#.# => #..#/##.#/.##./.#..
#.#/#.#/#.# => .#../###./##.#/.#..
###/#.#/#.# => .#../#.##/##.#/..#.
#.#/###/#.# => ##.#/.###/..##/.#..
###/###/#.# => .#../.###/..#./#...
###/#.#/### => ###./####/.###/#.##
###/###/### => #..#/.#../#.../...#`;

  const lineReader = createLineReaderFromString(input);
  const result = await solver(lineReader);

  t.assert.equal(result.first, 171);
  t.assert.equal(result.second, 2498142);
});
